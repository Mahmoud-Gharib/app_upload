name: Build Flutter App (Android & iOS)
on:
  push: 
    branches:
      - main
permissions:
  contents: write
jobs:
  build-android:
    runs-on: ubuntu-latest
    name: Build Android APK

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Read APK name from name.txt
        id: read_apk_name
        run: |
          APK_NAME=$(cat assets/app/name.txt)
          echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT

      - name: Rename APK and move to apk_release/
        run: |
          mkdir -p apk_release
          cp build/app/outputs/flutter-apk/app-release.apk apk_release/${{ steps.read_apk_name.outputs.apk_name }}.apk

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: apk_release/${{ steps.read_apk_name.outputs.apk_name }}.apk

  build-ios:
    runs-on: macos-13
    name: Build iOS App

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Check available iOS SDKs
        run: xcodebuild -showsdks | grep iOS

      - name: Build iOS without signing and create IPA
        run: |
          # Build iOS without code signing
          flutter build ios --debug --no-codesign
          
          # Create IPA manually from .app bundle
          mkdir -p build/ios/ipa
          cd build/ios/iphoneos
          mkdir -p Payload
          cp -r Runner.app Payload/
          zip -r ../ipa/Runner.ipa Payload/
          rm -rf Payload

      - name: List build output
        run: find build/ios -name "*.ipa" -o -name "*.app" -type f

      - name: Create iOS build directory
        run: mkdir -p ios_build

      - name: Copy iOS IPA
        run: |
          if [ -f "build/ios/ipa/Runner.ipa" ]; then
            cp build/ios/ipa/Runner.ipa ios_build/
          else
            echo "No IPA file found"
            exit 1
          fi

      - name: Upload iOS build as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: ios_build/

  build-windows:
    runs-on: windows-latest
    name: Build Windows App

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Build Windows executable
        run: flutter build windows --release

      - name: Create Windows build directory
        run: New-Item -ItemType Directory -Force -Path windows_build
        shell: pwsh

      - name: Read app name for Windows exe
        id: read_exe_name
        run: |
          $APP_NAME = Get-Content assets/app/name.txt
          echo "exe_name=$APP_NAME" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Copy Windows executable and dependencies
        run: |
          New-Item -ItemType Directory -Force -Path windows_build
          Copy-Item -Recurse build/windows/x64/runner/Release/* windows_build/
          Rename-Item -Path "windows_build\my_app.exe" -NewName "${{ steps.read_exe_name.outputs.exe_name }}.exe"
        shell: pwsh

      - name: Upload Windows build as artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-app
          path: windows_build/

  create-release:
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, build-windows]
    name: Create GitHub Release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read APK name from name.txt
        id: read_apk_name
        run: |
          APK_NAME=$(cat assets/app/name.txt)
          echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT

      - name: Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: release/

      - name: Download iOS build
        uses: actions/download-artifact@v4
        with:
          name: ios-app
          path: release/ios/

      - name: Download Windows build
        uses: actions/download-artifact@v4
        with:
          name: windows-app
          path: release/windows/

      - name: Create Windows archive
        run: |
          cd release/windows
          zip -r ../windows-app.zip .

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Mobile App Release v1.0.${{ github.run_number }}"
          tag_name: "v1.0.${{ github.run_number }}"
          files: |
            release/${{ steps.read_apk_name.outputs.apk_name }}.apk
            release/ios/Runner.ipa
            release/windows-app.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
